generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  STAFF
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Plans {
  plan_id       String         @id @unique @default(uuid())
  name          String
  amount        Int // INR: e.g., 349 or 1799
  duration      Int // in days: e.g., 30 or 365
  type          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[] // one-to-many: multiple companies can subscribe to this plan
}

model Subscription {
  subscription_id String   @id @unique @default(uuid())
  company_id      String   @unique // one company can have one subscription
  plan_id         String
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean @default(true)
  company         Company  @relation(fields: [company_id], references: [company_id])
  plans           Plans     @relation(fields: [plan_id], references: [plan_id])
  
}

model TempOrder {
  temp_id              String  @unique @id @default(uuid())
  companyName     String
  userName        String
  email           String   @unique
  phoneNumber     String
  position        String
  password        String
  plan_id         String
  razorpayOrderId String   @unique
  createdAt       DateTime @default(now())
}


model Company {
  company_id           String   @unique    @id @default(cuid())
  companyName          String
  officeLatitude       Float?
  officeLongitude      Float?
  allowedRadius        Int?
  createdAt            DateTime     @default(now())
  users                User[]
  subscription         Subscription?
}

model User {
  user_id              String  @unique @id @default(uuid())
  employee_id          String?
  userName             String   
  email                String   @unique
  phoneNumber          String
  position             String
  department           String?
  password             String
  role                 Role
  mode                 String?
  company_id           String
  company              Company @relation(fields:[company_id],references:[company_id])
  meeting              Meeting[]
meetingParticipant     MeetingParticipant[]
attendance             Attendance[]
leaveRequest           LeaveRequest[]
}



model Meeting {
  meeting_id            String  @unique @id @default(uuid())
  title                 String  
  description           String?
  scheduledAt           String
  link                  String
  createdAt             DateTime @default(now())
  user_id               String
  user                  User @relation(fields:[user_id],references:[user_id])
  meetingParticipant    MeetingParticipant[]
}

model MeetingParticipant {
  meetingparticipant_id String @unique   @id @default(uuid())
  meeting_id            String
  user_id               String
  meeting               Meeting  @relation(fields: [meeting_id], references: [meeting_id])
  user                  User     @relation(fields: [user_id], references: [user_id])
}

model Attendance {
  attendance_id         String @unique  @id @default(uuid())
  date                  DateTime
  checkIn               DateTime?
  checkOut              DateTime?
  latitude              Float?       // Latitude coordinate
  longitude             Float?       // Longitude coordinate
  status                 String   @default("ABSENT")
  report                String?  
  user_id               String  
  user                  User          @relation(fields: [user_id], references: [user_id])
}

model LeaveRequest {
  leave_id              String   @unique   @id @default(uuid())     
  startDate             String
  endDate               String
  reason                String
  status                LeaveStatus @default(PENDING)
  approvedBy            String?  
  createdAt             DateTime    @default(now())
  user_id               String 
  user                  User        @relation(fields: [user_id], references: [user_id])
}


model Token {
  token_id             String @unique @id @default(cuid())
  refreshToken         String
}